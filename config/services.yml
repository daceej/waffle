services:
  _defaults:
    autowire: true
    autoconfigure: true
    public: false

  _instanceof:
    Waffle\Model\Config\ConfigItemInterface:
      tags: ['config_items']
    Waffle\Command\DiscoverableCommandInterface:
      tags: ['commands']
    Waffle\Command\DiscoverableTaskInterface:
      tags: ['tasks']
    Waffle\Command\DiscoverableRecipeInterface:
      tags: ['recipes']

  di_helper:
    public: true
    class: 'Waffle\Helper\DiHelper'
    calls:
        - [ setContainer, [ '@service_container' ]]

  Waffle\:
    lazy: true
    resource: '../src'

  Waffle\Application:
    public: true

  Waffle\Model\IO\IOStyle:
    public: true

  Waffle\Model\Config\ConfigTreeService:
    public: true
    arguments:
      - !tagged config_items

  Waffle\Model\Command\CommandManager:
    public: true
    arguments:
      - !tagged commands

  Waffle\Model\Command\TaskManager:
    public: true
    arguments:
      - '@Waffle\Model\Context\Context'
      - '@Waffle\Model\Command\TaskFactory'
      - !tagged tasks

  Waffle\Model\Command\RecipeManager:
    public: true
    arguments:
      - '@Waffle\Model\Context\Context'
      - '@Waffle\Model\Command\RecipeFactory'
      - !tagged recipes

  # This gets access to the DiHelper so we can avoid loading services we don't
  # need.
  Waffle\Model\Site\Sync\SiteSyncFactory:
    public: true
    arguments:
      - '@di_helper'

  Waffle\Model\Site\Sync\DrushSiteSync:
    public: true

  # Shared null build handler.
  Waffle\Model\Build\NullBuildHandler:
    public: true

  # Backend build handlers factory (and related handlers).
  Waffle\Model\Build\BackendBuildHandlerFactory:
    public: true
    arguments:
      - '@di_helper'

  Waffle\Model\Build\Backend\ComposerBackendBuildHandler:
    public: true

  # Front build handlers factory (and related handlers).
  Waffle\Model\Build\FrontendBuildHandlerFactory:
    public: true
    arguments:
      - '@di_helper'

  Waffle\Model\Build\Frontend\GulpFrontendBuildHandler:
    public: true
